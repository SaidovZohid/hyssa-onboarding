// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: todo.sql

package sqlc

import (
	"context"
)

const countTodo = `-- name: CountTodo :one
SELECT count(1) FROM "todo"
`

func (q *Queries) CountTodo(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countTodo)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createTodo = `-- name: CreateTodo :one
INSERT INTO "todo" (title) VALUES ($1) RETURNING id, title, completed
`

func (q *Queries) CreateTodo(ctx context.Context, title string) (Todo, error) {
	row := q.db.QueryRow(ctx, createTodo, title)
	var i Todo
	err := row.Scan(&i.ID, &i.Title, &i.Completed)
	return i, err
}

const getTodoById = `-- name: GetTodoById :one
SELECT id, title, completed FROM "todo"
WHERE id = $1
`

func (q *Queries) GetTodoById(ctx context.Context, id int32) (Todo, error) {
	row := q.db.QueryRow(ctx, getTodoById, id)
	var i Todo
	err := row.Scan(&i.ID, &i.Title, &i.Completed)
	return i, err
}

const listTodo = `-- name: ListTodo :many
SELECT id, title, completed FROM "todo" ORDER BY id DESC LIMIT $1 OFFSET $2
`

type ListTodoParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListTodo(ctx context.Context, arg ListTodoParams) ([]Todo, error) {
	rows, err := q.db.Query(ctx, listTodo, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Todo
	for rows.Next() {
		var i Todo
		if err := rows.Scan(&i.ID, &i.Title, &i.Completed); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const patchTodo = `-- name: PatchTodo :one
UPDATE todo
SET title = COALESCE($2, title),
    completed = COALESCE($3, completed)
WHERE id = $1 RETURNING id, title, completed
`

type PatchTodoParams struct {
	ID        int32  `json:"id"`
	Title     string `json:"title"`
	Completed bool   `json:"completed"`
}

func (q *Queries) PatchTodo(ctx context.Context, arg PatchTodoParams) (Todo, error) {
	row := q.db.QueryRow(ctx, patchTodo, arg.ID, arg.Title, arg.Completed)
	var i Todo
	err := row.Scan(&i.ID, &i.Title, &i.Completed)
	return i, err
}

const updateTodo = `-- name: UpdateTodo :one
UPDATE "todo" SET completed = $1 WHERE id = $2 RETURNING id, title, completed
`

type UpdateTodoParams struct {
	Completed bool  `json:"completed"`
	ID        int32 `json:"id"`
}

func (q *Queries) UpdateTodo(ctx context.Context, arg UpdateTodoParams) (Todo, error) {
	row := q.db.QueryRow(ctx, updateTodo, arg.Completed, arg.ID)
	var i Todo
	err := row.Scan(&i.ID, &i.Title, &i.Completed)
	return i, err
}
